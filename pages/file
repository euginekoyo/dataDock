import '../styles/globals.css';
import { AuthProvider } from '../context/AuthContext';
import Head from "next/head";

function MyApp({ Component, pageProps }) {

    return (
        <AuthProvider>
            <Head>
                <title>DataDock</title>
            </Head>
            <div>

                <Component {...pageProps} />
            </div>
        </AuthProvider>
    );
}

export default MyApp;

import classNames from 'classnames';
import Link from 'next/link';
import { useRouter } from 'next/router';
import React, { useState, useMemo } from 'react';
import { ArticleIcon, CollapsIcon } from './icons';
import { UsersIcon, FolderIcon, HomeIcon as HomeIconOutline } from '@heroicons/react/24/outline/';
import { useAuth } from '../../context/AuthContext';
import { ROLES, PERMISSIONS, hasPermission } from '../../lib/roles';

const menuItems = [
    {
        id: 0,
        label: 'Home',
        icon: HomeIconOutline,
        link: '/',
        permission: 'view_dashboard',
    },
    {
        id: 1,
        label: 'User Management',
        icon: UsersIcon,
        link: '/dashboard',
        permission: 'manage_users',
    },
    {
        id: 2,
        label: 'Template Configuration',
        icon: ArticleIcon,
        link: '/templates',
        permission: 'view_templates',
    },
    {
        id: 3,
        label: 'Libraries',
        icon: FolderIcon,
        link: '/libraries',
        permission: 'view_libraries',
    },
];

const Sidebar = () => {
    const { user, logout } = useAuth();
    const [toggleCollapse, setToggleCollapse] = useState(false);
    const [isCollapsible, setIsCollapsible] = useState(false);
    const router = useRouter();

    const filteredMenuItems = menuItems.filter((item) =>
        hasPermission(user?.role, item.permission)
    );

    const activeMenu = useMemo(
        () => filteredMenuItems.find((menu) => menu.link === router.pathname),
        [router.pathname]
    );

    const sidebarClasses = classNames(
        'min-h-screen flex flex-col border-r transition-all duration-300 ease-in-out',
        'bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-700',
        {
            'w-64': !toggleCollapse,
            'w-16': toggleCollapse,
        }
    );

    const collapseButtonClasses = classNames(
        'absolute -right-3 top-6 z-10 p-1.5 rounded-full border shadow-md',
        'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-600',
        'hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200',
        {
            'rotate-180': toggleCollapse,
        }
    );

    const getNavItemClasses = (menu) => {
        const isActive = activeMenu?.id === menu.id;
        return classNames(
            'group relative flex items-center w-full px-3 py-2.5 rounded-lg',
            'transition-all duration-200 ease-in-out cursor-pointer',
            'hover:bg-gray-100 dark:hover:bg-gray-800',
            {
                'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400': isActive,
                'text-gray-700 dark:text-gray-300': !isActive,
            }
        );
    };

    const iconClasses = classNames(
        'w-5 h-5 flex-shrink-0 transition-colors duration-200'
    );

    const labelClasses = classNames(
        'ml-3 text-sm font-medium truncate transition-all duration-200',
        {
            'opacity-0 translate-x-4': toggleCollapse,
            'opacity-100 translate-x-0': !toggleCollapse,
        }
    );

    const handleMouseEnter = () => setIsCollapsible(true);
    const handleMouseLeave = () => setIsCollapsible(false);
    const handleToggle = () => setToggleCollapse(!toggleCollapse);

    const handleLogout = () => {
        logout();
        router.push('/login');
    };

    return (
        <aside
            className={sidebarClasses}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
        >
            <div className="relative p-4">
                <div
                    className={classNames('flex items-center transition-all duration-300', {
                        'justify-center': toggleCollapse,
                        'justify-start': !toggleCollapse,
                    })}
                >
                    <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                        <span className="text-white font-bold text-sm">L</span>
                    </div>
                    {!toggleCollapse && (
                        <span className="ml-3 text-lg font-semibold text-gray-900 dark:text-white">
              Dashboard
            </span>
                    )}
                </div>
                {isCollapsible && (
                    <button
                        className={collapseButtonClasses}
                        onClick={handleToggle}
                        aria-label={toggleCollapse ? 'Expand sidebar' : 'Collapse sidebar'}
                    >
                        <CollapsIcon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                    </button>
                )}
            </div>
            <nav className="flex-1 px-4 pb-4">
                <div className="space-y-1">
                    {filteredMenuItems.map((menu) => {
                        const Icon = menu.icon;
                        const isActive = activeMenu?.id === menu.id;
                        return (
                            <div key={menu.id} className="relative">
                                <Link href={menu.link}>
                                    <a className={getNavItemClasses(menu)}>
                                        <Icon className={iconClasses} />
                                        <span className={labelClasses}>{menu.label}</span>
                                        {isActive && (
                                            <div className="absolute left-0 top-1/2 -translate-y-1/2 w-1 h-6 bg-blue-600 rounded-r-full" />
                                        )}
                                        {toggleCollapse && (
                                            <div className="absolute left-full ml-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                                                {menu.label}
                                            </div>
                                        )}
                                    </a>
                                </Link>
                            </div>
                        );
                    })}
                </div>
            </nav>
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                <div
                    className={classNames('flex items-center transition-all duration-300', {
                        'justify-center': toggleCollapse,
                        'justify-start': !toggleCollapse,
                    })}
                >
                    <div className="w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center">
            <span className="text-gray-600 dark:text-gray-300 text-xs font-medium">
              {user?.name?.[0] || 'U'}
            </span>
                    </div>
                    {!toggleCollapse && (
                        <div className="ml-3">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                                {user?.name || 'User'}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                {user?.email || 'user@example.com'}
                            </p>
                            <button
                                onClick={handleLogout}
                                className="mt-2 text-sm text-red-600 hover:text-red-800"
                            >
                                Logout
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </aside>
    );
};

export default Sidebar;

{
  "name": "DataDock-v1",
  "version": "0.1.0",
  "private": true,
  "engines": {
    "node": ">=16.0.0",
    "yarn": ">=1.22.0",
    "npm": "please-use-yarn"
  },
  "scripts": {
    "dev": "next dev -p 5050",
    "build": "next build",
    "start": "next start -p 5050",
    "lint": "next lint",
    "predev": "node lib/seeder.js",
    "prestart": "node lib/seeder.js"
  },
  "dependencies": {
    "@ag-grid-community/infinite-row-model": "^28.2.0",
    "@headlessui/react": "^1.7.7",
    "@heroicons/react": "^2.0.13",
    "@monaco-editor/react": "^4.4.6",
    "ag-grid-community": "^28.2.0",
    "ag-grid-react": "^28.2.0",
    "ajv": "^8.11.0",
    "ajv-errors": "^3.0.0",
    "ajv-formats": "^2.1.1",
    "axios": "^0.27.2",
    "bcryptjs": "^3.0.2",
    "busboy": "^1.6.0",
    "classnames": "^2.3.2",
    "cuid": "^2.1.8",
    "daisyui": "^3.1.6",
    "dotenv": "^17.2.1",
    "fantasy-name-generator": "^2.0.0",
    "iron-session": "^8.0.4",
    "js-file-download": "^0.4.12",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "lucide-react": "^0.525.0",
    "moment": "^2.29.4",
    "mongodb": "^6.18.0",
    "mongoose": "^8.17.0",
    "mssql": "^11.0.1",
    "next": "12.3.0",
    "next-iron-session": "^4.2.0",
    "next-session": "^4.0.5",
    "next-themes": "^0.2.1",
    "next-transpile-modules": "^10.0.0",
    "nodemailer": "^7.0.5",
    "npm": "^9.2.0",
    "openai": "^5.9.0",
    "oracledb": "^6.8.0",
    "papaparse": "^5.3.2",
    "pg": "^8.16.3",
    "pg-connection-string": "^2.9.1",
    "promise-retry": "^2.0.1",
    "react": "18.2.0",
    "react-code-blocks": "^0.0.9-0",
    "react-confetti": "^6.1.0",
    "react-copy-to-clipboard": "^5.1.0",
    "react-dom": "18.2.0",
    "react-dropzone": "^14.2.2",
    "react-icons": "^4.7.1",
    "react-syntax-highlighter": "^15.5.0",
    "react-tailwindcss-select": "^1.6.0",
    "react-toastify": "^9.1.3",
    "react-toggle-dark-mode": "^1.1.1",
    "react-use": "^17.4.0",
    "reflect-metadata": "^0.2.2",
    "sharp": "^0.31.3",
    "string-similarity": "^4.0.4",
    "tailwind-scrollbar": "^4.0.2",
    "type-analyzer": "^0.4.0",
    "typeorm": "^0.3.25"
  },
  "devDependencies": {
    "@faker-js/faker": "^7.5.0",
    "@tailwindcss/forms": "^0.5.3",
    "@types/react": "19.1.9",
    "autoprefixer": "^10.4.11",
    "eslint": "8.23.1",
    "eslint-config-next": "12.3.0",
    "postcss": "^8.4.16",
    "tailwindcss": "^3.1.8",
    "typescript": "5.9.2"
  }
}
